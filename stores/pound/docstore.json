{"docstore/metadata": {"507aa6a9-fa3c-4cc3-85bc-53bc660081b4": {"doc_hash": "768aafa5d7c928f2de1cccd362a2c5a0a5f748a920d41b9b9e6e5859f410fe04"}, "4966fa16-5b7b-45b6-858c-27e0166ba757": {"doc_hash": "5f931321c61055725c9d9d930d356fc452463715e4f42200afbaa6150ddbdf8b"}, "f52cc254-e994-473d-a3b7-90a075049acd": {"doc_hash": "26c6677f8c8980baced849fa54a4b9bd4cac2204de459c3e4d5affe81d09c028"}, "c4ad8976-74a6-4a23-86cd-c27481354f4a": {"doc_hash": "bb766b3ef6b487fa26f523277781067c1cd3662584c74ce83718ba5a2a9f0949"}, "00aba02a-086f-411e-99d4-cac0a3b82f0c": {"doc_hash": "7d5dce5a2db173cef7e9f34320b4b065658caa502b8c5ef7b748764fe550f94c"}, "73fd7c12-9320-4e50-b7b5-822e41b1a527": {"doc_hash": "81145c64aa47f27a8f65c0ae48cd3e76443525aa8a481ad81033868684a3bb64"}, "eb719f10-1b79-435e-8b3a-ad97c26ad996": {"doc_hash": "c2f387097b01e5ebf75ea123b84438cea296cd93cd299aa2d124e955f5c40918"}, "2a38ef0d-ee0e-4097-b26f-3946bc1e7b65": {"doc_hash": "27928d9b0855afabbd5eefabaf97276b5d6025dc12c68711159b8bf78158320c"}, "f29901a9-4a1c-4c16-a0fc-112a27606e43": {"doc_hash": "c34d2a3879c2837e609e7a9d2ce248f7ba115e92cdce76175b9278ff00757195"}, "8ec45f3c-5134-45bb-b4d8-3d0d46149c81": {"doc_hash": "037f38f5c225bef42ea2053aaeb9668f15b7aab24e45c3811c75b23c0f38ea8a"}, "379902ec-f666-4028-9148-58584f005d6a": {"doc_hash": "5b80e6b41fbd634a3830269826b86d95c2860509ace20be1df4d6d99d95a918a"}, "99965a91-6783-4469-bca9-5a40f8a0beba": {"doc_hash": "a5fefaa6c0e53cb021d8e40c71e3b5aff6e09394d919779012059052f1cb2e59"}, "6e856ee4-95e1-4be1-a890-356e67aad637": {"doc_hash": "37c4753d5e50452e5d4848033fa5ed9c9dee22ff613876c3c01a7d2bf4ce17a6"}, "746f015a-80cb-4252-a7e3-5d435f1a3af4": {"doc_hash": "0a36db3c53ea4e39252d902209f87655eb8fbf31473a8743e1267a3af6310239"}, "589bf2c6-9370-4799-8163-295372f00031": {"doc_hash": "3690aebb4874b743c336f88d3c95d80930f51b0ee5a1d32d6fe5fbdcbcfbab02"}, "463b2c0b-eb3d-40a0-9995-2d5702d48347": {"doc_hash": "ee5fad3acbcf5a2f0ac3f2ae116cfec74bf7936e319f8b3266fecd6c13c5eef3"}, "fcfa23e0-b999-4726-9567-7f5dec6c6135": {"doc_hash": "a9cbdb8492d3b221577bbe664c6f5ee593247fdb2c4ff7bd53d463a507644c17"}, "2fd79010-2351-44a5-886d-fa8032ce89fd": {"doc_hash": "a62b1d7fb1b52066d45d98917fe0f01ff9d4a48348406098d05ed21eb43cef7a"}, "dc58c864-e05f-48e3-9afc-8980dd106769": {"doc_hash": "39d8db9dc5b34ed06d274a94629f8bd2966267868b3b8914aa43f87776115873"}, "7501d3a7-771c-4ec1-8eaa-f2b308543af8": {"doc_hash": "7a5f492e0498cd2aa76d9fa17006bc915c196a9d71a54aafb57637e1af457ea8"}, "c9920646-4c27-49a9-bae4-2b2a0865c098": {"doc_hash": "0503be5c40e94b1b2166d32599dd60bbdaa6f5b4902dc87f9b71296d458e98f3"}, "f1f90f52-6d6e-46f2-b768-32d07bf83ddd": {"doc_hash": "e3bd08425d4fbfa41dac7917784a9ec88053e13b0ac5a93e6a72c1a04d5e0ca8", "ref_doc_id": "507aa6a9-fa3c-4cc3-85bc-53bc660081b4"}, "78c5ffe8-2c21-4cb2-b51c-2aece54dc731": {"doc_hash": "81895092a762b51046e7260653bdec9aeaaa914ae43aeff5e46cc07c823d74a5", "ref_doc_id": "4966fa16-5b7b-45b6-858c-27e0166ba757"}, "fdc6a037-7cdb-4863-8793-9c62d44af97b": {"doc_hash": "678c359dfe98bd4e94694f8c89adaacb2040600393f56e045f05e89267b062bc", "ref_doc_id": "f52cc254-e994-473d-a3b7-90a075049acd"}, "3a58b3ae-e755-480a-9abd-0699862e8d06": {"doc_hash": "5d9ba19a7116e63bef0f6fe969b51ee95c301f56a99ae59a1645e26ddcdb7dd0", "ref_doc_id": "c4ad8976-74a6-4a23-86cd-c27481354f4a"}, "aeb7d31a-af27-460c-ad8d-70ad3109dc35": {"doc_hash": "008dfad168179bcd94d77bc704996576daf873fcc6e2dde8b472d240b266b0ab", "ref_doc_id": "00aba02a-086f-411e-99d4-cac0a3b82f0c"}, "02718a34-503a-4c5a-beff-a14094b91180": {"doc_hash": "335347a1600d1a8b1eb73c164cab5124088e1b62ac76e2783ec923a438c6b803", "ref_doc_id": "73fd7c12-9320-4e50-b7b5-822e41b1a527"}, "f5acb2df-e4aa-455c-8c62-529cb4058b38": {"doc_hash": "ece588c480a7f00f3b74ab5c8e8027b78d1e4a4a2895bd471b6e013b87704ce0", "ref_doc_id": "eb719f10-1b79-435e-8b3a-ad97c26ad996"}, "11c82e8d-dcac-470e-99fc-bae69db5284f": {"doc_hash": "4ad4e3f92b023369f1c7ab93efd7c3b2aa5fb806928dceabc99c138638154687", "ref_doc_id": "2a38ef0d-ee0e-4097-b26f-3946bc1e7b65"}, "a3eef142-8543-4cde-931e-1e0b0d650856": {"doc_hash": "baabb5dc26594c755533c8c52ef6ad86991f294af1a2791a9415c8a686d6951c", "ref_doc_id": "f29901a9-4a1c-4c16-a0fc-112a27606e43"}, "9ef5a76f-39f8-47d3-baa3-d84f92c15084": {"doc_hash": "d9609b71306d5ff8b6a8af95a6922cf8e2921658f77c3c2eaf226e0e4fb7c12b", "ref_doc_id": "8ec45f3c-5134-45bb-b4d8-3d0d46149c81"}, "05c9e629-019d-43b2-b8ce-296d389ca18e": {"doc_hash": "34430eba8fe6c62993b5ac2c7bced8c7df49e142a144741a90fc70aabeba2ab6", "ref_doc_id": "379902ec-f666-4028-9148-58584f005d6a"}, "f65402e8-11f8-4b5a-af9a-c0a49bdf8757": {"doc_hash": "25efef913b12761ae57c549a2b5091762b080728ba9f9826ec71bc32f4eb178d", "ref_doc_id": "99965a91-6783-4469-bca9-5a40f8a0beba"}, "f47488c3-e071-4678-9f9a-91dca4dfeb8a": {"doc_hash": "468edaf67b805eee386eb04394b7b82295a5179ab36b955a20e7d8747dd71661", "ref_doc_id": "6e856ee4-95e1-4be1-a890-356e67aad637"}, "266a8a39-3e79-4dc7-ade8-a734fcef2039": {"doc_hash": "cdef904ed87e5db40b00c53df829de546c17f15190d8b0c9caf4162669f8f275", "ref_doc_id": "746f015a-80cb-4252-a7e3-5d435f1a3af4"}, "7b5afe03-dbcb-4148-afcb-ae8d26e1ca94": {"doc_hash": "f07f8b88891e58d4f769bf40ebc19153182f2144da27d7e6b84765bc459ec3e7", "ref_doc_id": "589bf2c6-9370-4799-8163-295372f00031"}, "d4dc331c-f60c-471c-a144-a37cb6d60915": {"doc_hash": "05253ff58507d0e80ca981e4156d78b5bc86d64274aa06e0dabc1b76acba0961", "ref_doc_id": "463b2c0b-eb3d-40a0-9995-2d5702d48347"}, "af640a75-08e2-4069-b039-a6d032c70b80": {"doc_hash": "cc84e20bd7f9e702c8f0a1dc66bc53b22245994a5b867ece3151eb510b9d14c6", "ref_doc_id": "fcfa23e0-b999-4726-9567-7f5dec6c6135"}, "3eb0104c-dba1-4e5f-afe9-4457d71b0b4d": {"doc_hash": "97cac66f6bfc7b88470c52cb5ef2e0f68a04ee175d302b7ac4ca312e62a583f5", "ref_doc_id": "2fd79010-2351-44a5-886d-fa8032ce89fd"}, "93b13fe9-63a7-4f35-84dc-635b4d220535": {"doc_hash": "30ba3642cdf39705655bf38468d643fd8e66ad9e9ce32f059a3248d76589c2e7", "ref_doc_id": "dc58c864-e05f-48e3-9afc-8980dd106769"}, "534dfbda-6c47-4f9c-9864-e8d1a913cce4": {"doc_hash": "8127316a51999ad6aaf1c6a11989ea2fac3172e2b6da084f84b65a90df227b16", "ref_doc_id": "7501d3a7-771c-4ec1-8eaa-f2b308543af8"}, "dffa5ead-9772-4954-a62a-376992ad1441": {"doc_hash": "e671a6e5456cec15c218c56d0839de28ab2ff80f607811faa588072ce81fa341", "ref_doc_id": "c9920646-4c27-49a9-bae4-2b2a0865c098"}}, "docstore/ref_doc_info": {"507aa6a9-fa3c-4cc3-85bc-53bc660081b4": {"node_ids": ["f1f90f52-6d6e-46f2-b768-32d07bf83ddd"], "metadata": {"file_path": "README.md", "chunk_index": 0}}, "4966fa16-5b7b-45b6-858c-27e0166ba757": {"node_ids": ["78c5ffe8-2c21-4cb2-b51c-2aece54dc731"], "metadata": {"file_path": "src/main.rs", "chunk_index": 0}}, "f52cc254-e994-473d-a3b7-90a075049acd": {"node_ids": ["fdc6a037-7cdb-4863-8793-9c62d44af97b"], "metadata": {"file_path": "src/main.rs", "chunk_index": 1}}, "c4ad8976-74a6-4a23-86cd-c27481354f4a": {"node_ids": ["3a58b3ae-e755-480a-9abd-0699862e8d06"], "metadata": {"file_path": "src/main.rs", "chunk_index": 2}}, "00aba02a-086f-411e-99d4-cac0a3b82f0c": {"node_ids": ["aeb7d31a-af27-460c-ad8d-70ad3109dc35"], "metadata": {"file_path": "src/main.rs", "chunk_index": 3}}, "73fd7c12-9320-4e50-b7b5-822e41b1a527": {"node_ids": ["02718a34-503a-4c5a-beff-a14094b91180"], "metadata": {"file_path": "src/main.rs", "chunk_index": 4}}, "eb719f10-1b79-435e-8b3a-ad97c26ad996": {"node_ids": ["f5acb2df-e4aa-455c-8c62-529cb4058b38"], "metadata": {"file_path": "src/main.rs", "chunk_index": 5}}, "2a38ef0d-ee0e-4097-b26f-3946bc1e7b65": {"node_ids": ["11c82e8d-dcac-470e-99fc-bae69db5284f"], "metadata": {"file_path": "src/main.rs", "chunk_index": 6}}, "f29901a9-4a1c-4c16-a0fc-112a27606e43": {"node_ids": ["a3eef142-8543-4cde-931e-1e0b0d650856"], "metadata": {"file_path": "src/main.rs", "chunk_index": 7}}, "8ec45f3c-5134-45bb-b4d8-3d0d46149c81": {"node_ids": ["9ef5a76f-39f8-47d3-baa3-d84f92c15084"], "metadata": {"file_path": "src/main.rs", "chunk_index": 8}}, "379902ec-f666-4028-9148-58584f005d6a": {"node_ids": ["05c9e629-019d-43b2-b8ce-296d389ca18e"], "metadata": {"file_path": "src/main.rs", "chunk_index": 9}}, "99965a91-6783-4469-bca9-5a40f8a0beba": {"node_ids": ["f65402e8-11f8-4b5a-af9a-c0a49bdf8757"], "metadata": {"file_path": "src/main.rs", "chunk_index": 10}}, "6e856ee4-95e1-4be1-a890-356e67aad637": {"node_ids": ["f47488c3-e071-4678-9f9a-91dca4dfeb8a"], "metadata": {"file_path": "src/main.rs", "chunk_index": 11}}, "746f015a-80cb-4252-a7e3-5d435f1a3af4": {"node_ids": ["266a8a39-3e79-4dc7-ade8-a734fcef2039"], "metadata": {"file_path": "src/main.rs", "chunk_index": 12}}, "589bf2c6-9370-4799-8163-295372f00031": {"node_ids": ["7b5afe03-dbcb-4148-afcb-ae8d26e1ca94"], "metadata": {"file_path": "src/main.rs", "chunk_index": 13}}, "463b2c0b-eb3d-40a0-9995-2d5702d48347": {"node_ids": ["d4dc331c-f60c-471c-a144-a37cb6d60915"], "metadata": {"file_path": "src/main.rs", "chunk_index": 14}}, "fcfa23e0-b999-4726-9567-7f5dec6c6135": {"node_ids": ["af640a75-08e2-4069-b039-a6d032c70b80"], "metadata": {"file_path": "src/main.rs", "chunk_index": 15}}, "2fd79010-2351-44a5-886d-fa8032ce89fd": {"node_ids": ["3eb0104c-dba1-4e5f-afe9-4457d71b0b4d"], "metadata": {"file_path": "src/main.rs", "chunk_index": 16}}, "dc58c864-e05f-48e3-9afc-8980dd106769": {"node_ids": ["93b13fe9-63a7-4f35-84dc-635b4d220535"], "metadata": {"file_path": "src/main.rs", "chunk_index": 17}}, "7501d3a7-771c-4ec1-8eaa-f2b308543af8": {"node_ids": ["534dfbda-6c47-4f9c-9864-e8d1a913cce4"], "metadata": {"file_path": "src/main.rs", "chunk_index": 18}}, "c9920646-4c27-49a9-bae4-2b2a0865c098": {"node_ids": ["dffa5ead-9772-4954-a62a-376992ad1441"], "metadata": {"file_path": "src/main.rs", "chunk_index": 19}}}, "docstore/data": {"f1f90f52-6d6e-46f2-b768-32d07bf83ddd": {"__data__": {"id_": "f1f90f52-6d6e-46f2-b768-32d07bf83ddd", "embedding": null, "metadata": {"file_path": "README.md", "chunk_index": 0}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "507aa6a9-fa3c-4cc3-85bc-53bc660081b4", "node_type": "4", "metadata": {"file_path": "README.md", "chunk_index": 0}, "hash": "768aafa5d7c928f2de1cccd362a2c5a0a5f748a920d41b9b9e6e5859f410fe04", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "# pound\nRust port of antirez\u2019s kilo http://antirez.com/news/108", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 63, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "78c5ffe8-2c21-4cb2-b51c-2aece54dc731": {"__data__": {"id_": "78c5ffe8-2c21-4cb2-b51c-2aece54dc731", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 0}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4966fa16-5b7b-45b6-858c-27e0166ba757", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 0}, "hash": "5f931321c61055725c9d9d930d356fc452463715e4f42200afbaa6150ddbdf8b", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "use crossterm::{\n    cursor, \n    execute, \n    event,\n    event::{read, KeyCode, KeyEvent, Event::*}, \n    terminal,\n    terminal::ClearType,\n    queue,\n    Result\n};\n\nuse std::io::{Write, stdout};\nuse std::{cmp, env, fs, io};\nuse std::cmp::Ordering;\nuse std::time::Duration; \nuse std::path::Path;\n\nconst VERSION: &str = env!(\"CARGO_PKG_VERSION\");\n\nstruct CleanUp;\n\nimpl Drop for CleanUp {\n    fn drop(&mut self) { \n        terminal::disable_raw_mode().expect(\"ERROR: Could Not Disable Raw Mode\"); \n        Output::clear_screen().expect(\"ERROR: Failed To Clear Screen\");\n    }\n}\n\nstruct CursorController\n{\n    cursor_x: usize,\n    cursor_y: usize,\n    screen_columns: usize,\n    screen_rows: usize,\n    row_offset: usize,\n    column_offset: usize,\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 750, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "fdc6a037-7cdb-4863-8793-9c62d44af97b": {"__data__": {"id_": "fdc6a037-7cdb-4863-8793-9c62d44af97b", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 1}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f52cc254-e994-473d-a3b7-90a075049acd", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 1}, "hash": "26c6677f8c8980baced849fa54a4b9bd4cac2204de459c3e4d5affe81d09c028", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "impl CursorController", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 21, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3a58b3ae-e755-480a-9abd-0699862e8d06": {"__data__": {"id_": "3a58b3ae-e755-480a-9abd-0699862e8d06", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 2}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c4ad8976-74a6-4a23-86cd-c27481354f4a", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 2}, "hash": "bb766b3ef6b487fa26f523277781067c1cd3662584c74ce83718ba5a2a9f0949", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n    fn new(window_size: (usize, usize)) -> CursorController\n    {\n        Self \n        {\n            cursor_x: 0,\n            cursor_y: 0,\n            screen_columns: window_size.0,\n            screen_rows: window_size.1,\n            row_offset: 0,\n            column_offset: 0, \n        }\n    }\n\n    fn scroll(&mut self)\n    {\n        self.column_offset = cmp::min(self.column_offset, self.cursor_x);\n        if self.cursor_x >= self.column_offset + self.screen_columns\n        {\n            self.column_offset = self.cursor_x - self.screen_columns + 1;\n        }\n\n        self.row_offset = cmp::min(self.row_offset, self.cursor_y);\n        if self.cursor_y >= self.row_offset + self.screen_rows\n        {\n            self.row_offset = self.cursor_y - self.screen_rows + 1;\n        }\n    }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 793, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "aeb7d31a-af27-460c-ad8d-70ad3109dc35": {"__data__": {"id_": "aeb7d31a-af27-460c-ad8d-70ad3109dc35", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 3}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "00aba02a-086f-411e-99d4-cac0a3b82f0c", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 3}, "hash": "7d5dce5a2db173cef7e9f34320b4b065658caa502b8c5ef7b748764fe550f94c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "fn move_cursor(&mut self, direction: KeyCode, editor_rows: &EditorRows)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 71, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "02718a34-503a-4c5a-beff-a14094b91180": {"__data__": {"id_": "02718a34-503a-4c5a-beff-a14094b91180", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 4}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "73fd7c12-9320-4e50-b7b5-822e41b1a527", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 4}, "hash": "81145c64aa47f27a8f65c0ae48cd3e76443525aa8a481ad81033868684a3bb64", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n        let number_of_rows = editor_rows.number_of_rows();", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 60, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f5acb2df-e4aa-455c-8c62-529cb4058b38": {"__data__": {"id_": "f5acb2df-e4aa-455c-8c62-529cb4058b38", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 5}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "eb719f10-1b79-435e-8b3a-ad97c26ad996", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 5}, "hash": "c2f387097b01e5ebf75ea123b84438cea296cd93cd299aa2d124e955f5c40918", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "match direction \n        {\n            KeyCode::Up => \n            {\n                if self.cursor_y > 0 \n                {\n                    self.cursor_y -= 1; \n                }\n            }\n            KeyCode::Down => \n            { \n                if self.cursor_y < number_of_rows\n                {\n                    self.cursor_y += 1; \n                }\n            }\n            KeyCode::Left => \n            {\n                if self.cursor_x != 0\n                {\n                    self.cursor_x -= 1;\n                }\n                else if self.cursor_y > 0\n                {\n                    self.cursor_y -= 1;\n                    self.cursor_x = editor_rows.get_row(self.cursor_y).len();\n                }\n            }\n            KeyCode::Right => \n            {\n                if self.cursor_y < number_of_rows\n                {\n                    match self.cursor_x.cmp(&editor_rows.get_row(self.cursor_y).len())\n                    {\n                        Ordering::Less => self.cursor_x += 1,\n                        Ordering::Equal => {\n                            self.cursor_y += 1;\n                            self.cursor_x = 0\n                        },\n                        _ => {}\n                    }\n                }\n            },\n            KeyCode::End => self.cursor_y = number_of_rows - 1,\n            KeyCode::Home => self.cursor_y = 0,\n\n            _ => unimplemented!(), \n        }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1447, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "11c82e8d-dcac-470e-99fc-bae69db5284f": {"__data__": {"id_": "11c82e8d-dcac-470e-99fc-bae69db5284f", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 6}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2a38ef0d-ee0e-4097-b26f-3946bc1e7b65", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 6}, "hash": "27928d9b0855afabbd5eefabaf97276b5d6025dc12c68711159b8bf78158320c", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "let row_len = if self.cursor_y < number_of_rows\n        {\n            editor_rows.get_row(self.cursor_y).len()\n        }\n        else \n        {\n            0\n        };\n        self.cursor_x = cmp::min(self.cursor_x, row_len);\n    }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 233, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "a3eef142-8543-4cde-931e-1e0b0d650856": {"__data__": {"id_": "a3eef142-8543-4cde-931e-1e0b0d650856", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 7}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f29901a9-4a1c-4c16-a0fc-112a27606e43", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 7}, "hash": "c34d2a3879c2837e609e7a9d2ce248f7ba115e92cdce76175b9278ff00757195", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "9ef5a76f-39f8-47d3-baa3-d84f92c15084": {"__data__": {"id_": "9ef5a76f-39f8-47d3-baa3-d84f92c15084", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 8}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8ec45f3c-5134-45bb-b4d8-3d0d46149c81", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 8}, "hash": "037f38f5c225bef42ea2053aaeb9668f15b7aab24e45c3811c75b23c0f38ea8a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "struct EditorRows\n{\n    row_contents: Vec<Box<str>>,\n}\n\nimpl EditorRows\n{\n    fn new() -> Self \n    {\n        let mut arg = env::args();\n\n        match arg.nth(1) \n        {\n            None => Self {\n                row_contents: Vec::new(),\n            },\n            \n            Some(file) => Self::from_file(file.as_ref()),\n        }\n    }\n    \n    fn from_file(file: &Path) -> Self \n    {\n        let file_contents = fs::read_to_string(file).expect(\"Unable to read file\");\n        Self \n        {\n            row_contents: file_contents.lines().map(|it| it.into()).collect(),\n        }\n    }\n\n    fn number_of_rows(&self) -> usize \n    {\n        self.row_contents.len()\n    }\n\n    fn get_row(&self, at:usize) -> &str \n    {\n        &self.row_contents[at] \n    }\n}\n\nstruct Output\n{\n    window_size: (usize, usize),\n    editor_contents: EditorContents, \n    cursor_controller: CursorController,\n    editor_rows : EditorRows,\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 930, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "05c9e629-019d-43b2-b8ce-296d389ca18e": {"__data__": {"id_": "05c9e629-019d-43b2-b8ce-296d389ca18e", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 9}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "379902ec-f666-4028-9148-58584f005d6a", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 9}, "hash": "5b80e6b41fbd634a3830269826b86d95c2860509ace20be1df4d6d99d95a918a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "impl Output", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 11, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f65402e8-11f8-4b5a-af9a-c0a49bdf8757": {"__data__": {"id_": "f65402e8-11f8-4b5a-af9a-c0a49bdf8757", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 10}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "99965a91-6783-4469-bca9-5a40f8a0beba", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 10}, "hash": "a5fefaa6c0e53cb021d8e40c71e3b5aff6e09394d919779012059052f1cb2e59", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n    fn new() -> Self \n    {\n        let window_size = terminal::size()\n            .map(|(x, y)| (x as usize, y as usize))\n            .unwrap();\n        Self\n        { \n            window_size,\n            editor_contents: EditorContents::new(),\n            cursor_controller: CursorController::new(window_size),\n            editor_rows: EditorRows::new(),\n        }\n    }\n    \n    fn clear_screen() -> crossterm::Result<()>\n    {\n        execute!(stdout(), terminal::Clear(ClearType::All))?;\n        execute!(stdout(), cursor::MoveTo(0, 0))\n    }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 550, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "f47488c3-e071-4678-9f9a-91dca4dfeb8a": {"__data__": {"id_": "f47488c3-e071-4678-9f9a-91dca4dfeb8a", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 11}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6e856ee4-95e1-4be1-a890-356e67aad637", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 11}, "hash": "37c4753d5e50452e5d4848033fa5ed9c9dee22ff613876c3c01a7d2bf4ce17a6", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "fn draw_rows(&mut self)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 23, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "266a8a39-3e79-4dc7-ade8-a734fcef2039": {"__data__": {"id_": "266a8a39-3e79-4dc7-ade8-a734fcef2039", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 12}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "746f015a-80cb-4252-a7e3-5d435f1a3af4", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 12}, "hash": "0a36db3c53ea4e39252d902209f87655eb8fbf31473a8743e1267a3af6310239", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n        let screen_rows = self.window_size.1;\n        let screen_columns = self.window_size.0;", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 96, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "7b5afe03-dbcb-4148-afcb-ae8d26e1ca94": {"__data__": {"id_": "7b5afe03-dbcb-4148-afcb-ae8d26e1ca94", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 13}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "589bf2c6-9370-4799-8163-295372f00031", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 13}, "hash": "3690aebb4874b743c336f88d3c95d80930f51b0ee5a1d32d6fe5fbdcbcfbab02", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "for i in 0..screen_rows", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 23, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "d4dc331c-f60c-471c-a144-a37cb6d60915": {"__data__": {"id_": "d4dc331c-f60c-471c-a144-a37cb6d60915", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 14}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "463b2c0b-eb3d-40a0-9995-2d5702d48347", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 14}, "hash": "ee5fad3acbcf5a2f0ac3f2ae116cfec74bf7936e319f8b3266fecd6c13c5eef3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "{\n            let file_row = i + self.cursor_controller.row_offset;\n            if file_row >= self.editor_rows.number_of_rows() \n            {\n                if self.editor_rows.number_of_rows() == 0 && i == screen_rows / 3 \n                {\n                    let mut welcome : String = format!(\"Pound Editor --- Version {}\", VERSION);\n                    if welcome.len() > screen_columns \n                    {\n                        welcome.truncate(screen_columns)\n                    }\n\n                    let mut padding = (screen_columns - welcome.len()) / 2;\n                    if padding != 0 \n                    {\n                        self.editor_contents.push('~');\n                        padding -= 1\n                    }\n\n                    (0..padding).for_each(|_| self.editor_contents.push(' '));\n                    self.editor_contents.push_str(&welcome);\n                } \n                else \n                {\n                    self.editor_contents.push('~');\n                }\n            }\n            else \n            {\n                let row = self.editor_rows.get_row(file_row);\n                let column_offset = self.cursor_controller.column_offset;\n                let len = cmp::min(row.len().saturating_sub(column_offset), screen_columns);\n                let start = if len == 0 { 0 } else { column_offset };\n                self.editor_contents.push_str(&row[start..start + len])\n            }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1448, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "af640a75-08e2-4069-b039-a6d032c70b80": {"__data__": {"id_": "af640a75-08e2-4069-b039-a6d032c70b80", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 15}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "fcfa23e0-b999-4726-9567-7f5dec6c6135", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 15}, "hash": "a9cbdb8492d3b221577bbe664c6f5ee593247fdb2c4ff7bd53d463a507644c17", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "queue!(\n                self.editor_contents,\n                terminal::Clear(ClearType::UntilNewLine)\n            )\n            .unwrap();\n\n            if i < screen_rows - 1 \n            {\n                self.editor_contents.push_str(\"\\r\\n\");\n            }\n       }", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 268, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "3eb0104c-dba1-4e5f-afe9-4457d71b0b4d": {"__data__": {"id_": "3eb0104c-dba1-4e5f-afe9-4457d71b0b4d", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 16}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "2fd79010-2351-44a5-886d-fa8032ce89fd", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 16}, "hash": "a62b1d7fb1b52066d45d98917fe0f01ff9d4a48348406098d05ed21eb43cef7a", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "93b13fe9-63a7-4f35-84dc-635b4d220535": {"__data__": {"id_": "93b13fe9-63a7-4f35-84dc-635b4d220535", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 17}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dc58c864-e05f-48e3-9afc-8980dd106769", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 17}, "hash": "39d8db9dc5b34ed06d274a94629f8bd2966267868b3b8914aa43f87776115873", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "fn refresh_screen(&mut self) -> crossterm::Result<()>\n    {\n        self.cursor_controller.scroll();\n        \n        queue!(\n            self.editor_contents,\n            cursor::Hide,\n            terminal::Clear(ClearType::All), \n            cursor::MoveTo(0, 0)\n        )?;\n        self.draw_rows();\n\n        let cursor_x = self.cursor_controller.cursor_x - self.cursor_controller.column_offset;\n        let cursor_y = self.cursor_controller.cursor_y - self.cursor_controller.row_offset;\n        queue!(\n            self.editor_contents,\n            cursor::MoveTo(cursor_x as u16, cursor_y as u16),\n            cursor::Show\n        )?;\n        \n        self.editor_contents.flush()\n    }\n\n    fn move_cursor(&mut self, direction: KeyCode)\n    {\n        self.cursor_controller.move_cursor(direction, &self.editor_rows);\n    }\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 830, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "534dfbda-6c47-4f9c-9864-e8d1a913cce4": {"__data__": {"id_": "534dfbda-6c47-4f9c-9864-e8d1a913cce4", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 18}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7501d3a7-771c-4ec1-8eaa-f2b308543af8", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 18}, "hash": "7a5f492e0498cd2aa76d9fa17006bc915c196a9d71a54aafb57637e1af457ea8", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "struct Reader;\n\nimpl Reader \n{\n    fn read_key(&self) -> crossterm::Result<KeyEvent>\n    {\n        loop \n        {\n            if event::poll(Duration::from_millis(500))?\n            {\n                if let Key(event) = read()?\n                {\n                    return Ok(event);\n                }\n            }\n        }\n    }\n}\n\nstruct Editor \n{\n    reader: Reader,\n    output: Output,\n}\nimpl Editor\n{\n    fn new() -> Self \n    {\n        Self\n        {\n            reader: Reader,\n            output: Output::new(),\n        }\n    }\n\n    fn process_keypress(&mut self) -> crossterm::Result<bool>\n    {\n        match self.reader.read_key()?\n        {\n            // process quit\n            KeyEvent\n            {\n                code: KeyCode::Char('q'),\n                modifiers: event::KeyModifiers::CONTROL,\n            } => return Ok(false),\n\n            // process cursor movement\n            KeyEvent\n            {\n                code: direction @ (KeyCode::Up | KeyCode::Down | KeyCode::Left | KeyCode::Right | KeyCode::Home | KeyCode::End),\n                modifiers: event::KeyModifiers::NONE,\n            } => self.output.move_cursor(direction),\n            \n            // else do nothing\n            _ => {}\n        }\n        Ok(true)\n    }\n\n    fn run(&mut self) -> crossterm::Result<bool>\n    {\n        self.output.refresh_screen()?;\n        self.process_keypress()\n    }\n}\n\nstruct EditorContents\n{\n    content: String,\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1443, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "dffa5ead-9772-4954-a62a-376992ad1441": {"__data__": {"id_": "dffa5ead-9772-4954-a62a-376992ad1441", "embedding": null, "metadata": {"file_path": "src/main.rs", "chunk_index": 19}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c9920646-4c27-49a9-bae4-2b2a0865c098", "node_type": "4", "metadata": {"file_path": "src/main.rs", "chunk_index": 19}, "hash": "0503be5c40e94b1b2166d32599dd60bbdaa6f5b4902dc87f9b71296d458e98f3", "class_name": "RelatedNodeInfo"}}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "impl EditorContents\n{\n    fn new() -> Self\n    {\n        Self \n        {\n            content: String::new(),\n        }\n    }\n\n    fn push(&mut self, ch:char)\n    {\n        self.content.push(ch)\n    }\n\n    fn push_str(&mut self, string: &str)\n    {\n        self.content.push_str(string)\n    }\n}\n\nimpl std::io::Write for EditorContents \n{\n    fn write(&mut self, buf: &[u8]) -> std::io::Result<usize>\n    {\n        match std::str::from_utf8(buf)\n        {\n            Ok(s) => \n            {\n                self.content.push_str(s);\n                Ok(s.len())\n            }\n            Err(_) => Err(std::io::ErrorKind::WriteZero.into()),\n        }\n    }\n    fn flush(&mut self) -> std::io::Result<()>\n    {\n        let out = write!(stdout(), \"{}\", self.content);\n        std::io::stdout().flush()?;\n        self.content.clear();\n        out\n    }\n}\n\nfn main() -> Result<()>\n{\n    let _clean_up = CleanUp;\n    terminal::enable_raw_mode()?;\n    let mut editor = Editor::new();\n    while editor.run()?{}\n    Ok(())\n}", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1014, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}}